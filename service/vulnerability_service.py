from service.input_service import execute_command
from model.vulnerability import Vulnerability
from datetime import datetime
import os

vulnerabilities = []

def search_sensitive_log(data):       

    output = execute_command(f"adb logcat -d | grep {data} | tail -n 8")

    if output:
        print(f"[+] Sensitive data '{data}' were found in logs")        

        INSECURE_LOGGING_CWE = os.getenv("INSECURE_LOGGING_CWE")
        INSECURE_LOGGING_SEV = os.getenv("INSECURE_LOGGING_SEV")
        INSECURE_LOGGING_NAME = os.getenv("INSECURE_LOGGING_NAME")
        INSECURE_LOGGING_DESC = os.getenv("INSECURE_LOGGING_DESC")
        INSECURE_LOGGING_REFS = os.getenv("INSECURE_LOGGING_REFS")        
        INSECURE_LOGGING_REMEDIATION = os.getenv("INSECURE_LOGGING_REMEDIATION")

        vulnerability = Vulnerability(INSECURE_LOGGING_NAME, INSECURE_LOGGING_DESC, output, INSECURE_LOGGING_SEV, INSECURE_LOGGING_CWE, datetime.now(), INSECURE_LOGGING_REMEDIATION, INSECURE_LOGGING_REFS)

        vulnerabilities.append(vulnerability)

        print(f"[+] Vulnerability [{INSECURE_LOGGING_NAME}] Added")


def get_vulnerabilities():
    return vulnerabilities

def is_app_running(package):
    #check if app is running
    output = execute_command(f"adb shell ps | grep {package}")
    if package in output:
        return True
    return False

def is_emulated_device():
    emulators = [
        "ranchu",
        "goldfish",
        "vbox86",
        "qemu"
    ]
    output = execute_command("adb shell getprop ro.hardware")
    output = f"[-] getprop ro.hardware: {output}"

    if any(word in output for word in emulators):                
        return True, output
    return False

def check_emulator(package):
    is_emulator =  is_emulated_device()
    emulator_str = "emula"

    if is_emulator[0]:
        if not is_app_running(package):
            print("[-] App is not running")
            return
        
        output_screen = dump_screen(emulator_str)

        if (emulator_str in output_screen):
            print("[-] Emulator advise is being used")
            return
        
        EMULATOR_DETECTION_CWE = os.getenv("EMULATOR_DETECTION_CWE")
        EMULATOR_DETECTION_SEV = os.getenv("EMULATOR_DETECTION_SEV")
        EMULATOR_DETECTION_NAME = os.getenv("EMULATOR_DETECTION_NAME")
        EMULATOR_DETECTION_DESC = os.getenv("EMULATOR_DETECTION_DESC")
        EMULATOR_DETECTION_REFS = os.getenv("EMULATOR_DETECTION_REFS")        
        EMULATOR_DETECTION_REMEDIATION = os.getenv("EMULATOR_DETECTION_REMEDIATION") 

        #@todo check if is possible to make a screenshot and print on github

        vulnerability = Vulnerability(EMULATOR_DETECTION_NAME, EMULATOR_DETECTION_DESC, is_emulator[1], EMULATOR_DETECTION_SEV, EMULATOR_DETECTION_CWE, datetime.now(), EMULATOR_DETECTION_REMEDIATION, EMULATOR_DETECTION_REFS)

        vulnerabilities.append(vulnerability)

        print(f"[+] Vulnerability [{vulnerability}] Added")


#function uses a tool that read the ui elements to search specific content/text/data
def dump_screen(data):
    filename = f"ui_dump_{datetime.now()}.xml"
    execute_command(f"adb shell uiautomator dump /sdcard/{filename}")
    return execute_command(f"adb shell cat /sdcard/{filename} | grep {data}")

def check_root(package):
    root_str = "root"
    is_rooted = is_rooted_device()

    if is_rooted[0]:
        if not is_app_running(package):
            print("[-] App is not running")
            return

        output_screen = dump_screen(root_str)

        if (root_str in output_screen):
            print("[-] Root advise is being used")
            return
        
        ROOT_DETECTION_CWE = os.getenv("ROOT_DETECTION_CWE")
        ROOT_DETECTION_SEV = os.getenv("ROOT_DETECTION_SEV")
        ROOT_DETECTION_NAME = os.getenv("ROOT_DETECTION_NAME")
        ROOT_DETECTION_DESC = os.getenv("ROOT_DETECTION_DESC")
        ROOT_DETECTION_REFS = os.getenv("ROOT_DETECTION_REFS")        
        ROOT_DETECTION_REMEDIATION = os.getenv("ROOT_DETECTION_REMEDIATION") 

        #@todo check if is possible to make a screenshot and print on github

        vulnerability = Vulnerability(ROOT_DETECTION_NAME, ROOT_DETECTION_DESC, is_rooted[1], ROOT_DETECTION_SEV, ROOT_DETECTION_CWE, datetime.now(), ROOT_DETECTION_REMEDIATION, ROOT_DETECTION_REFS)

        vulnerabilities.append(vulnerability)

        print(f"[+] Vulnerability [{vulnerability}] Added")

def is_rooted_device():
    output = execute_command("adb shell whoami")
    output = f"[-] whoami: {output}"
    print(output)
    if "root" in output:
        return True, output
    return False