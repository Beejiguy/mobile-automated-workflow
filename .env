# .env

# VULNERABILITIES
# - Insecure logging
INSECURE_LOGGING_RULE_ID=android/insecure-logging
INSECURE_LOGGING_PRECISION=high
INSECURE_LOGGING_NAME=Insecure Logging
INSECURE_LOGGING_SEV=7.5
INSECURE_LOGGING_CWE=external/cwe/cwe-346
INSECURE_LOGGING_REMEDIATION="### Recommendation\nAvoid logging sensitive information such as credentials, tokens, or personal user data. Use `Log.isLoggable()` to control logging levels in production builds.\n\n### Example (Vulnerable Code)\n```java\nLog.d(\"DEBUG\", \"User password: \" + password);\n```\n\n### Fixed Code\n```java\nif (Log.isLoggable(\"DEBUG\", Log.DEBUG)) {\n    Log.d(\"DEBUG\", \"User attempted login\");\n}\n```\n\n### References\n- [Android Developers: Log](https://developer.android.com/reference/android/util/Log)\n- [OWASP Mobile Top 10: Insecure Logging](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures)\n\n### Evidence\n"

# - Root Detection
ROOT_DETECTION_RULE_ID=android/root-detection
ROOT_DETECTION_PRECISION=high
ROOT_DETECTION_NAME=Lack of Root Detection
ROOT_DETECTION_SEV=8.0
ROOT_DETECTION_CWE=external/cwe/cwe-937
ROOT_DETECTION_REMEDIATION="### Recommendation\n Implement root detection mechanisms to prevent execution on rooted devices. Check for Cydia, SuperSU, Magisk, Xposed, etc. \n\n### Fixed Code\n```java\npublic boolean isDeviceRooted() {\n    String[] paths = {\"/sbin/su\",\"/system/bin/su\",\"/system/xbin/su\",\"/data/local/xbin/su\",\"/data/local/bin/su\",\"/system/sd/xbin/su\",\"/system/bin/failsafe/su\",\"/data/local/su\",\"/su/bin/su\"};\n    for(String path:paths) {\n        if (new File(path).exists()) {\n            return true;\n        }\n }\n return false;\n}\n```\n\n### References\n- [MASWE-0097](https://mas.owasp.org/MASWE/MASVS-RESILIENCE/MASWE-0097)\n\n### Evidence\n"

# - Emulator Detection 
EMULATOR_DETECTION_RULE_ID=android/emulator-detection
EMULATOR_DETECTION_PRECISION=high
EMULATOR_DETECTION_NAME=Lack of Emulator Detection
EMULATOR_DETECTION_SEV=7.5
EMULATOR_DETECTION_CWE=external/cwe/cwe-940
EMULATOR_DETECTION_REMEDIATION="### Recommendation\n The application fails to detect if it is running in an emulated environment, allowing attackers to analyze and manipulate its behavior in a controlled setting. This can lead to reverse engineering, data manipulation, and exploitation of vulnerabilities. \n\n### Fixed Code\n```java\npublic boolean isEmulator() { String[] knownEmulatorDevices = { \"generic\", \"unknown\", \"google_sdk\", \"Emulator\", \"Android SDK built for x86\" }; for (String device : knownEmulatorDevices) { if (Build.MODEL.contains(device) || Build.MANUFACTURER.contains(device)) { return true; } } return (Build.BRAND.startsWith(\"generic\") && Build.DEVICE.startsWith(\"generic\")) || \"google_sdk\".equals(Build.PRODUCT); }```\n\n### References\n- [MASWE-0099](https://mas.owasp.org/MASWE/MASVS-RESILIENCE/MASWE-0099)\n\n### Evidence\n"




